type User {
  id: ID!
  username: String!
  preferred_username: String!
  bio: String
  image: String
  recipes(filter: ModelRecipeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelRecipeConnection
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Recipe {
  type: String!
  id: ID
  authorObject: User!
  name: String
  servings: String
  prepTime: String
  cookTime: String
  ingredients: String
  category: String
  description: String
  directions: String
  images: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  preferred_username: ModelStringInput
  bio: ModelStringInput
  image: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getRecipe(id: ID!): Recipe
  listRecipes(filter: ModelRecipeFilterInput, limit: Int, nextToken: String): ModelRecipeConnection
}

input CreateUserInput {
  id: ID
  username: String!
  preferred_username: String!
  bio: String
  image: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  username: String
  preferred_username: String
  bio: String
  image: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createRecipe(input: CreateRecipeInput!, condition: ModelRecipeConditionInput): Recipe
  updateRecipe(input: UpdateRecipeInput!, condition: ModelRecipeConditionInput): Recipe
  deleteRecipe(input: DeleteRecipeInput!, condition: ModelRecipeConditionInput): Recipe
}

input ModelUserConditionInput {
  username: ModelStringInput
  preferred_username: ModelStringInput
  bio: ModelStringInput
  image: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateRecipe: Recipe @aws_subscribe(mutations: ["createRecipe"])
  onUpdateRecipe: Recipe @aws_subscribe(mutations: ["updateRecipe"])
  onDeleteRecipe: Recipe @aws_subscribe(mutations: ["deleteRecipe"])
}

type ModelRecipeConnection {
  items: [Recipe]
  nextToken: String
}

input ModelRecipeFilterInput {
  type: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  servings: ModelStringInput
  prepTime: ModelStringInput
  cookTime: ModelStringInput
  ingredients: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  directions: ModelStringInput
  images: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRecipeFilterInput]
  or: [ModelRecipeFilterInput]
  not: ModelRecipeFilterInput
}

input CreateRecipeInput {
  type: String!
  id: ID
  name: String
  servings: String
  prepTime: String
  cookTime: String
  ingredients: String
  category: String
  description: String
  directions: String
  images: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userId: ID!
}

input UpdateRecipeInput {
  type: String
  id: ID!
  name: String
  servings: String
  prepTime: String
  cookTime: String
  ingredients: String
  category: String
  description: String
  directions: String
  images: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userId: ID
}

input DeleteRecipeInput {
  id: ID
}

input ModelRecipeConditionInput {
  type: ModelStringInput
  name: ModelStringInput
  servings: ModelStringInput
  prepTime: ModelStringInput
  cookTime: ModelStringInput
  ingredients: ModelStringInput
  category: ModelStringInput
  description: ModelStringInput
  directions: ModelStringInput
  images: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRecipeConditionInput]
  or: [ModelRecipeConditionInput]
  not: ModelRecipeConditionInput
}
