{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/katvengo/prep-cado/App/Components/AppPicker.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport AppText from \"../Components/AppText\";\nimport colors from \"../config/colors\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport Screen from \"../Screens/Screen\";\nimport PickerItem from \"./PickerItem\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var icon = _ref.icon,\n      items = _ref.items,\n      placeholder = _ref.placeholder,\n      onSelectItem = _ref.onSelectItem,\n      selectedItem = _ref.selectedItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 20,\n    color: colors.medium,\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }), selectedItem ? React.createElement(AppText, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, selectedItem.label) : React.createElement(AppText, {\n    style: styles.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 20,\n    color: colors.medium,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 1\n    }\n  }, React.createElement(Button, {\n    title: \"Close\",\n    onPress: function onPress() {\n      return setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    style: styles.flat,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PickerItem, {\n        item: item,\n        label: item.label,\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectItem(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 5\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 1\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 25,\n    flexDirection: 'row',\n    width: '100%',\n    padding: 15,\n    marginVertical: 10\n  },\n  textInput: {\n    color: colors.dark\n  },\n  icon: {\n    marginRight: 10\n  },\n  text: {\n    flex: 1\n  },\n  flat: {\n    backgroundColor: colors.light,\n    flex: 1,\n    color: colors.black\n  },\n  picker: {\n    color: colors.medium\n  },\n  placeholder: {\n    color: colors.medium,\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Components/AppPicker.js"],"names":["React","useState","AppText","colors","MaterialCommunityIcons","TouchableWithoutFeedback","Screen","PickerItem","AppPicker","icon","items","placeholder","onSelectItem","selectedItem","modalVisible","setModalVisible","styles","container","medium","text","label","item","value","toString","flat","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","width","padding","marginVertical","textInput","color","dark","marginRight","flex","black","picker"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nimport {View, StyleSheet, Modal, Button, SafeAreaView, FlatList} from 'react-native'\nimport AppText from '../Components/AppText'\nimport colors from '../config/colors'\nimport {MaterialCommunityIcons} from '@expo/vector-icons'\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport Screen from '../Screens/Screen'\nimport PickerItem from './PickerItem';\n\nfunction AppPicker ({icon, items, placeholder, onSelectItem, selectedItem }) { \n    const [modalVisible, setModalVisible] = useState(false)\nreturn ( \n    <>\n    <TouchableWithoutFeedback\n    onPress={() => setModalVisible(true)}>\n    <View style={styles.container}> \n    {icon &&  ( <MaterialCommunityIcons \n    name={icon} \n    size={20} \n    color={colors.medium} \n    style={styles.icon}\n    />\n    )}\n    {selectedItem ? ( \n    <AppText style={styles.text}>{selectedItem.label}</AppText> \n    ) : ( \n    <AppText style={styles.placeholder}>{placeholder}</AppText> )}\n    \n    <MaterialCommunityIcons \n    name=\"chevron-down\" \n    size={20} \n    color={colors.medium} \n    />\n    </View>\n    </TouchableWithoutFeedback>\n    <Modal\n    visible={modalVisible} animationType=\"slide\">\n<Screen>\n<Button title=\"Close\" onPress={() => setModalVisible(false)}/>\n<FlatList \ndata={items}\nkeyExtractor={item => item.value.toString()}\nstyle={styles.flat}\nrenderItem={({item} ) => \n    <PickerItem\n    item={item}\n    label={item.label}\n    onPress={() => {\n        setModalVisible(false)\n        onSelectItem(item)\n    }}\n    />\n}\n/>\n    </Screen>    \n    </Modal>\n\n</>\n);\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.light,\n        borderRadius: 25,\n        flexDirection: 'row',\n        width: '100%',\n        padding: 15,\n        marginVertical: 10\n    },\n    textInput: {\n        color: colors.dark\n    },\n    icon: {\n        marginRight: 10\n    },\n    text: {\n        flex: 1\n    },\n    flat: {\n        backgroundColor: colors.light,\n        flex: 1,\n        color: colors.black\n    },\n    picker: {\n        color: colors.medium\n    },\n    placeholder: {\n        color: colors.medium,\n        flex: 1\n    }\n})\nexport default AppPicker"]},"metadata":{},"sourceType":"module"}