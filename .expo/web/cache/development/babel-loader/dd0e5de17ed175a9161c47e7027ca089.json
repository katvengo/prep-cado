{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport AuthContext from \"./context\";\nimport authStorage from \"./storage\";\nimport { API, graphqlOperation } from '@aws-amplify/api';\nimport { getUser } from \"../../src/graphql/queries\";\n\nfunction currentUser(sub) {\n  var result;\n  return _regeneratorRuntime.async(function currentUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(sub, \"sub\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n            id: sub\n          })));\n\n        case 3:\n          result = _context.sent;\n          console.log(result, \"currentUserfunction\");\n          return _context.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default useAuth = function useAuth() {\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var logIn = function logIn(authToken) {\n    var userDetails = authToken;\n    var userInfo = userDetails.idToken.payload;\n    var token = authToken.accessToken.jwtToken;\n    authStorage.storeToken(token);\n    currentUser(userInfo.sub).then(function (data) {\n      console.log(data, \"current User\");\n      setUser(data, token);\n    });\n  };\n\n  var logOut = function logOut() {\n    setUser(null);\n    authStorage.removeToken();\n  };\n\n  return {\n    user: user,\n    logIn: logIn,\n    logOut: logOut\n  };\n};","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Auth/useAuth.js"],"names":["useContext","jwtDecode","AuthContext","authStorage","API","graphqlOperation","getUser","currentUser","sub","console","log","graphql","id","result","useAuth","user","setUser","logIn","authToken","userDetails","userInfo","idToken","payload","token","accessToken","jwtToken","storeToken","then","data","logOut","removeToken"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,WAAP;AACA,OAAOC,WAAP;AAEA,SAAQC,GAAR,EAAcC,gBAAd,QAAsC,kBAAtC;AAEA,SAASC,OAAT;;AAEC,SAAeC,WAAf,CAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,KAAjB;AADD;AAAA,2CAGsBJ,GAAG,CAACO,OAAJ,CAAYN,gBAAgB,CAACC,OAAD,EAAU;AAACM,YAAAA,EAAE,EAAEJ;AAAL,WAAV,CAA5B,CAHtB;;AAAA;AAGOK,UAAAA,MAHP;AAICJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAAoB,qBAApB;AAJD,2CAKQA,MALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQD,eAAeC,OAAO,GAAG,mBAAM;AAC7B,oBAA0Bd,UAAU,CAACE,WAAD,CAApC;AAAA,MAAQa,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,SAAD,EAAe;AAC3B,QAAMC,WAAW,GAAGD,SAApB;AACA,QAAME,QAAQ,GAAGD,WAAW,CAACE,OAAZ,CAAoBC,OAArC;AACA,QAAMC,KAAK,GAAGL,SAAS,CAACM,WAAV,CAAsBC,QAApC;AACAtB,IAAAA,WAAW,CAACuB,UAAZ,CAAuBH,KAAvB;AAEAhB,IAAAA,WAAW,CAACa,QAAQ,CAACZ,GAAV,CAAX,CACCmB,IADD,CACM,UAACC,IAAD,EAAU;AACdnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ,EAAkB,cAAlB;AACAZ,MAAAA,OAAO,CAACY,IAAD,EAAOL,KAAP,CAAP;AACD,KAJD;AASD,GAfD;;AAiBA,MAAMM,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBb,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAb,IAAAA,WAAW,CAAC2B,WAAZ;AACD,GAHD;;AAOA,SAAO;AAAEf,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,KAAK,EAALA,KAAR;AAAeY,IAAAA,MAAM,EAANA;AAAf,GAAP;AACD,CA5BD","sourcesContent":["import { useContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\n\nimport AuthContext from \"./context\";\nimport authStorage from \"./storage\";\n\nimport {API,  graphqlOperation } from '@aws-amplify/api';\n\nimport { getUser } from '../../src/graphql/queries'\n\n async function currentUser (sub) {\n  console.log(sub, \"sub\")\n  // const grabCurrentUser = await API.graphqlOperation({ getUser, id: id });\n  const result = await API.graphql(graphqlOperation(getUser, {id: sub}))\n  console.log(result, \"currentUserfunction\")\n  return result\n}\n\nexport default useAuth = () => {\n  const { user, setUser } = useContext(AuthContext);\n\n  const logIn = (authToken) => {\n    const userDetails = authToken\n    const userInfo = userDetails.idToken.payload\n    const token = authToken.accessToken.jwtToken\n    authStorage.storeToken(token);\n    \n    currentUser(userInfo.sub)\n    .then((data) => {\n      console.log(data, \"current User\")\n      setUser(data, token)\n    })\n    //const token = authToken.accessToken.jwtToken\n   // setUserSession(userDetails.idToken.payload);\n    //authStorage.storeToken(token);\n    //  console.log(grabUser, 'console')\n  };\n\n  const logOut = () => {\n    setUser(null);\n    authStorage.removeToken();\n  };\n\n\n\n  return { user, logIn, logOut };\n};\n"]},"metadata":{},"sourceType":"module"}