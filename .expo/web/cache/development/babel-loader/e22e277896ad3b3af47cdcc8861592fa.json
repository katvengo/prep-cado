{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/katvengo/prep-cado/App/Screens/ListingEditScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { Storage } from 'aws-amplify';\nimport Amplify, { API, graphqlOperation } from '@aws-amplify/api';\nimport config from \"../../aws-exports\";\nAmplify.configure(config);\nimport useAuth from \"../Auth/useAuth\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { AppForm, AppFormField, AppFormPicker, SubmitButton } from \"../Components/forms\";\nimport Screen from \"./Screen\";\nimport FormImagePicker from \"../Components/forms/FormImagePicker\";\nimport useLocation from \"../hooks/useLocation\";\nimport UploadScreen from \"./UploadScreen\";\nimport uploadRecipeFromImage from \"../Screens/UploadRecipeFromImage\";\nimport { createRecipe } from \"../../src/graphql/mutations\";\nimport { listRecipes } from \"../../src/graphql/queries\";\nvar validationSchema = Yup.object().shape({\n  name: Yup.string().required().min(1).label(\"Name\"),\n  description: Yup.string().min(1).max(1000).label(\"Description\"),\n  category: Yup.object().label(\"Category\"),\n  servings: Yup.string().label(\"Servings\"),\n  prepTime: Yup.string().label(\"Preparation Time\"),\n  cookTime: Yup.string().label(\"Cook Time\"),\n  ingredients: Yup.string().label(\"Ingredients\"),\n  directions: Yup.string().label(\"Directions\"),\n  images: Yup.array().min(1, \"Please select at least one image.\")\n});\nvar categories = [{\n  value: 1,\n  label: 'Vegetarian'\n}, {\n  value: 2,\n  label: 'Seafood'\n}, {\n  value: 3,\n  label: 'Chicken'\n}, {\n  value: 4,\n  label: 'Meat'\n}];\n\nfunction ListingEditScreen() {\n  var _useAuth = useAuth(),\n      user = _useAuth.user,\n      logOut = _useAuth.logOut;\n\n  var location = useLocation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      uploadVisible = _useState2[0],\n      setUploadVisible = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      progress = _useState4[0],\n      setProgress = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userImages = _useState6[0],\n      setUserImages = _useState6[1];\n\n  var imageArray = [];\n\n  var handleSubmit = function handleSubmit(recipe, _ref) {\n    var resetForm, images, recipeName, i, element, resImage, blob, r;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            resetForm = _ref.resetForm;\n            setProgress(0);\n            setUploadVisible(true);\n            _context.prev = 3;\n            images = recipe.images;\n            recipeName = recipe.name.replace(\"[ ]+\", \"g\", '');\n            i = 0;\n\n          case 7:\n            if (!(i < images.length)) {\n              _context.next = 21;\n              break;\n            }\n\n            element = images[i];\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(fetch(element));\n\n          case 11:\n            resImage = _context.sent;\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(resImage.blob());\n\n          case 14:\n            blob = _context.sent;\n            setProgress(i);\n            _context.next = 18;\n            return _regeneratorRuntime.awrap(Storage.put(recipeName + 'Image' + i + '.png', blob, {\n              contentType: 'image/png',\n              ACL: 'public-read',\n              progressCallback: function progressCallback(progress) {\n                console.log(\"Uploaded: \" + progress.loaded + \"/\" + progress.total);\n              }\n            }).then(function (result) {\n              var key = result.key;\n              var base = 'https://prepcado6506732548334d97920e3054b1bbca03211300-dev.s3.us-west-2.amazonaws.com/public/';\n              var imageURL = base + key;\n              imageArray.push(imageURL);\n            }).catch(function (err) {\n              return alert(err);\n            }));\n\n          case 18:\n            i++;\n            _context.next = 7;\n            break;\n\n          case 21:\n            console.log(imageArray);\n            recipe.images = imageArray;\n            console.log(recipe);\n            r = API.graphql(graphqlOperation(createRecipe, {\n              input: _objectSpread({\n                type: 'post'\n              }, recipe)\n            }, function (progress) {\n              return setProgress(progress);\n            }));\n\n            if (!r) {\n              console.log(r);\n              setUploadVisible(false);\n              alert('Could not save Recipe');\n            } else if (r) {\n              console.log(r);\n              setUploadVisible(false);\n              resetForm();\n              alert('Recipe updated successfully');\n            }\n\n            _context.next = 31;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 28]], Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 1\n    }\n  }, React.createElement(UploadScreen, {\n    onDone: function onDone() {\n      return setUploadVisible(false);\n    },\n    progress: progress,\n    visible: uploadVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 1\n    }\n  }), React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 2\n    }\n  }, React.createElement(AppForm, {\n    initialValues: {\n      name: '',\n      servings: '',\n      prepTime: '',\n      cookTime: '',\n      ingredients: '',\n      category: '',\n      description: '',\n      directions: '',\n      images: [],\n      userId: user.sub\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 1\n    }\n  }, React.createElement(FormImagePicker, {\n    name: \"images\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    maxLength: 255,\n    placeholder: \"Name\",\n    name: \"name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    maxLength: 255,\n    multiline: true,\n    placeholder: \"Description\",\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormPicker, {\n    items: categories,\n    name: \"category\",\n    placeholder: \"Category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 2\n    }\n  }), React.createElement(AppFormField, {\n    maxLength: 255,\n    placeholder: \"Servings\",\n    name: \"servings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    maxLength: 255,\n    placeholder: \"Preparation Time\",\n    name: \"prepTime\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    maxLength: 255,\n    placeholder: \"Cooking Time\",\n    name: \"cookTime\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    multiline: true,\n    numberOfLines: 1,\n    maxLength: 255,\n    placeholder: \"Ingredients\",\n    name: \"ingredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    multiline: true,\n    maxLength: 255,\n    placeholder: \"Directions\",\n    name: \"directions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 1\n    }\n  }), React.createElement(View, {\n    style: styles.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 1\n    }\n  }, React.createElement(SubmitButton, {\n    title: \"Add\",\n    size: 300,\n    radius: 10,\n    fontSize: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 3\n    }\n  })))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 20\n  },\n  submit: {\n    justifyContent: 'center',\n    alignSelf: 'center'\n  }\n});\nexport default ListingEditScreen;","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Screens/ListingEditScreen.js"],"names":["React","useEffect","useState","Yup","Storage","Amplify","API","graphqlOperation","config","configure","useAuth","AppForm","AppFormField","AppFormPicker","SubmitButton","Screen","FormImagePicker","useLocation","UploadScreen","uploadRecipeFromImage","createRecipe","listRecipes","validationSchema","object","shape","name","string","required","min","label","description","max","category","servings","prepTime","cookTime","ingredients","directions","images","array","categories","value","ListingEditScreen","user","logOut","location","uploadVisible","setUploadVisible","progress","setProgress","userImages","setUserImages","imageArray","handleSubmit","recipe","resetForm","recipeName","replace","i","length","element","fetch","resImage","blob","put","contentType","ACL","progressCallback","console","log","loaded","total","then","result","key","base","imageURL","push","catch","err","alert","r","graphql","input","type","styles","container","userId","sub","submit","StyleSheet","create","padding","justifyContent","alignSelf"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup'\nimport { Storage} from 'aws-amplify';\nimport Amplify, { API,  graphqlOperation } from '@aws-amplify/api';\nimport config from '../../aws-exports'\nAmplify.configure(config)\nimport useAuth from \"../Auth/useAuth\";\n\nimport { StyleSheet, View, ScrollView} from 'react-native'\nimport { AppForm, AppFormField, AppFormPicker, SubmitButton } from '../Components/forms'\nimport Screen from './Screen'\nimport FormImagePicker from '../Components/forms/FormImagePicker'\nimport useLocation from \"../hooks/useLocation\";\nimport UploadScreen from \"./UploadScreen\";\nimport uploadRecipeFromImage from '../Screens/UploadRecipeFromImage';\n\nimport { createRecipe } from '../../src/graphql/mutations'\nimport { listRecipes } from '../../src/graphql/queries'\n\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string().required().min(1).label(\"Name\"),\n    description: Yup.string().min(1).max(1000).label(\"Description\"),\n    category: Yup.object().label(\"Category\"),\n    servings: Yup.string().label(\"Servings\"),\n    prepTime: Yup.string().label(\"Preparation Time\"),\n    cookTime: Yup.string().label(\"Cook Time\"),\n    ingredients: Yup.string().label(\"Ingredients\"),\n    directions: Yup.string().label(\"Directions\"),\n    images: Yup.array().min(1, \"Please select at least one image.\"),\n    \n})\nconst categories = [\n    {\n        value: 1,\n        label: 'Vegetarian'\n    },\n    {\n        value: 2,\n        label: 'Seafood'\n    },\n    {\n        value: 3,\n        label: 'Chicken'\n    },\n    {\n        value: 4,\n        label: 'Meat'\n    }\n]\n\nfunction ListingEditScreen () { \nconst { user, logOut } = useAuth();\n// currentUser(user.sub)\nconst location = useLocation();\nconst [uploadVisible, setUploadVisible] = useState(false);\nconst [progress, setProgress] = useState(0);\nconst [userImages, setUserImages] = useState([])\n\nconst imageArray = []\n\nconst handleSubmit = async (recipe, {resetForm} ) => {\n    setProgress(0);\n    setUploadVisible(true);\n    try {\n        const images = recipe.images\n        const recipeName = recipe.name.replace(\"[ ]+\",\"g\", '')\n\n        for (let i = 0; i < images.length; i++) {\n            const element = images[i];\n            const resImage = await fetch(element)\n            const blob = await resImage.blob()\n            setProgress(i)\n            await Storage.put(recipeName + 'Image' + i + '.png', blob, {\n                contentType: 'image/png',\n                ACL: 'public-read',\n                progressCallback(progress) {\n                   console.log(`Uploaded: ${progress.loaded}/${progress.total}`);\n                  },\n            })\n            .then (result => \n                {\n                    const key = result.key\n                    const base = 'https://prepcado6506732548334d97920e3054b1bbca03211300-dev.s3.us-west-2.amazonaws.com/public/'\n                    const imageURL = base + key\n                    imageArray.push(imageURL)\n                }\n                )\n            .catch(err => alert(err)\n            );   \n        }\n        console.log(imageArray)\n        recipe.images = imageArray\n        console.log(recipe)\n\n        const r = API.graphql(graphqlOperation(createRecipe, {input: {type: 'post', ...recipe}}, (progress) => setProgress(progress)))\n                if(!r) {\n                console.log(r)\n                setUploadVisible(false);\n                alert('Could not save Recipe')\n                } else if (r){\n                console.log(r)\n                setUploadVisible(false);\n                resetForm();\n                alert('Recipe updated successfully')\n\n\n            }\n      } catch (err) {\n        console.log(err)\n      }\n    \n}\n\nreturn ( \n<Screen style={styles.container}>\n<UploadScreen\n        onDone={() => setUploadVisible(false)}\n        progress={progress}\n        visible={uploadVisible}\n      />\n <ScrollView>\n<AppForm\ninitialValues={{\n    name: '', \n    servings: '', \n    prepTime: '', \n    cookTime: '', \n    ingredients: '', \n    category: '', \n    description: '',\n    directions: '',\n    images: [],\n    userId: user.sub\n}\n}\nonSubmit={handleSubmit}\nvalidationSchema={validationSchema}\n>\n<FormImagePicker name=\"images\" />\n<AppFormField\nmaxLength={255}\nplaceholder=\"Name\"\nname=\"name\"\nautoFocus={true}\n />\n\n<AppFormField\nmaxLength={255}\nmultiline\nplaceholder=\"Description\"\nname=\"description\"\n />\n <AppFormPicker\nitems={categories}\nname=\"category\"\nplaceholder=\"Category\"\n/>\n<AppFormField\nmaxLength={255}\nplaceholder=\"Servings\"\nname=\"servings\"\n />\n<AppFormField\nmaxLength={255}\nplaceholder=\"Preparation Time\"\nname=\"prepTime\"\n />\n<AppFormField\nmaxLength={255}\nplaceholder=\"Cooking Time\"\nname=\"cookTime\"\n />\n<AppFormField\n multiline={true}\nnumberOfLines={1}\nmaxLength={255}\nplaceholder=\"Ingredients\"\nname=\"ingredients\"\n />\n<AppFormField\n multiline={true}\nmaxLength={255}\nplaceholder=\"Directions\"\nname=\"directions\"\n />\n<View style={styles.submit}>\n  <SubmitButton title=\"Add\" size={300} radius={10} fontSize={18}/>\n  \n</View>\n</AppForm>\n</ScrollView>\n</Screen>\n\n);\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        padding: 20\n    },\n    submit: {\n        justifyContent: 'center',\n        alignSelf: 'center'\n    }\n\n})\nexport default ListingEditScreen"]},"metadata":{},"sourceType":"module"}