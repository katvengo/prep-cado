{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SecureStore from \"expo-secure-store\";\nimport jwtDecode from \"jwt-decode\";\nvar key = \"authToken\";\n\nvar storeToken = function storeToken(authToken) {\n  return _regeneratorRuntime.async(function storeToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(key, authToken));\n\n        case 3:\n          _context.next = 17;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.prev = 7;\n          console.log(\"hitting storage\", authToken);\n          console.log(\"type\", typeof authToken);\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(LocalStorage.setItem(key, authToken));\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t1 = _context[\"catch\"](7);\n          console.log(\"Error storing the auth token\", _context.t0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5], [7, 14]], Promise);\n};\n\nvar getToken = function getToken() {\n  return _regeneratorRuntime.async(function getToken$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync(key));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(\"Error getting the auth token\", _context2.t0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar getUser = function getUser() {\n  var token;\n  return _regeneratorRuntime.async(function getUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getToken());\n\n        case 2:\n          token = _context3.sent;\n          return _context3.abrupt(\"return\", token ? jwtDecode(token) : null);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar removeToken = function removeToken() {\n  return _regeneratorRuntime.async(function removeToken$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(SecureStore.deleteItemAsync(key));\n\n        case 3:\n          _context4.next = 8;\n          break;\n\n        case 5:\n          _context4.prev = 5;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(\"Error removing the auth token\", _context4.t0);\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nexport default {\n  getToken: getToken,\n  getUser: getUser,\n  removeToken: removeToken,\n  storeToken: storeToken\n};","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Auth/storage.js"],"names":["SecureStore","jwtDecode","key","storeToken","authToken","setItemAsync","console","log","LocalStorage","setItem","getToken","getItemAsync","getUser","token","removeToken","deleteItemAsync"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAMC,GAAG,GAAG,WAAZ;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAETJ,WAAW,CAACK,YAAZ,CAAyBH,GAAzB,EAA8BE,SAA9B,CAFS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMbE,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,SAA/B;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,OAAOH,SAA3B;AAPa;AAAA,2CAQPI,YAAY,CAACC,OAAb,CAAqBP,GAArB,EAA0BE,SAA1B,CARO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWbE,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAiBA,IAAMG,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEAV,WAAW,CAACW,YAAZ,CAAyBT,GAAzB,CAFA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIbI,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AAJa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAQA,IAAMK,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACMF,QAAQ,EADd;;AAAA;AACRG,UAAAA,KADQ;AAAA,4CAEPA,KAAK,GAAGZ,SAAS,CAACY,KAAD,CAAZ,GAAsB,IAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEVd,WAAW,CAACe,eAAZ,CAA4Bb,GAA5B,CAFU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIhBI,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAQA,eAAe;AAAEG,EAAAA,QAAQ,EAARA,QAAF;AAAYE,EAAAA,OAAO,EAAPA,OAAZ;AAAqBE,EAAAA,WAAW,EAAXA,WAArB;AAAkCX,EAAAA,UAAU,EAAVA;AAAlC,CAAf","sourcesContent":["import * as SecureStore from \"expo-secure-store\";\nimport jwtDecode from \"jwt-decode\";\n\nconst key = \"authToken\";\n\nconst storeToken = async (authToken) => {\n  try {\n    await SecureStore.setItemAsync(key, authToken);\n  } \n  catch (error) {\n    try {\n      console.log(\"hitting storage\", authToken)\n      console.log(\"type\", typeof authToken)\n      await LocalStorage.setItem(key, authToken);\n    } \n    catch {\n      console.log(\"Error storing the auth token\", error);\n\n    }\n  }\n};\n\nconst getToken = async () => {\n  try {\n    return await SecureStore.getItemAsync(key);\n  } catch (error) {\n    console.log(\"Error getting the auth token\", error);\n  }\n};\n\nconst getUser = async () => {\n  const token = await getToken();\n  return token ? jwtDecode(token) : null;\n};\n\nconst removeToken = async () => {\n  try {\n    await SecureStore.deleteItemAsync(key);\n  } catch (error) {\n    console.log(\"Error removing the auth token\", error);\n  }\n};\n\nexport default { getToken, getUser, removeToken, storeToken };\n"]},"metadata":{},"sourceType":"module"}