{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/katvengo/prep-cado/App/Screens/Feed.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RecipeCard from \"../Components/AppRecipes/RecipeCard\";\nimport Screen from \"../Screens/Screen\";\nimport useAuth from \"../Auth/useAuth\";\nimport Amplify, { API, graphqlOperation } from '@aws-amplify/api';\nimport config from \"../../src/aws-exports\";\nAmplify.configure(config);\nimport { listRecipes } from \"../../src/graphql/queries\";\n\nfunction grabRecipesByUser(sub) {\n  var result;\n  return _regeneratorRuntime.async(function grabRecipesByUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(sub, \"grabRecipes\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(listRecipes, {\n            authorRecipe: sub\n          })));\n\n        case 3:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction Feed(props) {\n  var _this = this;\n\n  var _useAuth = useAuth(),\n      user = _useAuth.user,\n      logOut = _useAuth.logOut;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userRecipes = _useState2[0],\n      setUserRecipes = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refreshing = _useState4[0],\n      setRefreshing = _useState4[1];\n\n  useEffect(function () {\n    var user = user.data.getUser();\n    console.log(user);\n    grabRecipesByUser(user.id);\n    console.log(user.id, 'user.sub').then(function (result) {\n      if (result !== undefined) {\n        var allRecipes = result.data.listRecipes.items;\n        console.log(allRecipes);\n        setUserRecipes(_toConsumableArray(allRecipes));\n      } else if (result === undefined) {\n        console.log(\"no recipes :(\");\n      }\n    });\n  }, []);\n  return React.createElement(Screen, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 1\n    }\n  }, React.createElement(FlatList, {\n    data: userRecipes,\n    keyExtractor: function keyExtractor(recipe) {\n      return recipe.id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(RecipeCard, {\n        header: item.name,\n        image: item.images[0],\n        onPress: function onPress() {\n          return navigation.navigate(routes.LISTING_DETAILS, item);\n        },\n        thumbnailUrl: item.images[0],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      });\n    },\n    refreshing: refreshing,\n    onRefresh: function onRefresh() {\n      grabRecipesByUser(user.sub).then(function (result) {\n        var allRecipes = result.data.listRecipes.items;\n        setUserRecipes(_toConsumableArray(allRecipes));\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flexWrap: \"wrap\"\n  },\n  container: {\n    margin: 20\n  },\n  screen: {\n    padding: 20\n  }\n});\nexport default Feed;","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Screens/Feed.js"],"names":["React","useState","useEffect","RecipeCard","Screen","useAuth","Amplify","API","graphqlOperation","config","configure","listRecipes","grabRecipesByUser","sub","console","log","graphql","authorRecipe","result","Feed","props","user","logOut","userRecipes","setUserRecipes","refreshing","setRefreshing","data","getUser","id","then","undefined","allRecipes","items","styles","screen","container","recipe","toString","item","name","images","navigation","navigate","routes","LISTING_DETAILS","StyleSheet","create","main","flexWrap","margin","padding"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,OAAOC,UAAP;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;AAEA,OAAOC,OAAP,IAAiBC,GAAjB,EAAuBC,gBAAvB,QAA+C,kBAA/C;AACA,OAAOC,MAAP;AACAH,OAAO,CAACI,SAAR,CAAkBD,MAAlB;AAEA,SAASE,WAAT;;AAGA,SAAeC,iBAAf,CAAkCC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,aAAjB;AADF;AAAA,2CAEuBN,GAAG,CAACS,OAAJ,CAAYR,gBAAgB,CAACG,WAAD,EAAc;AAACM,YAAAA,YAAY,EAAEJ;AAAf,WAAd,CAA5B,CAFvB;;AAAA;AAEQK,UAAAA,MAFR;AAAA,2CAGSA,MAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,iBAAyBf,OAAO,EAAhC;AAAA,MAAQgB,IAAR,YAAQA,IAAR;AAAA,MAAcC,MAAd,YAAcA,MAAd;;AACA,kBAAuCrB,QAAQ,CAAC,EAAD,CAA/C;AAAA;AAAA,MAAOsB,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAoCvB,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOwB,UAAP;AAAA,MAAmBC,aAAnB;;AAEAxB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMmB,IAAI,GAAGA,IAAI,CAACM,IAAL,CAAUC,OAAV,EAAb;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACAT,IAAAA,iBAAiB,CAACS,IAAI,CAACQ,EAAN,CAAjB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,CAACQ,EAAjB,EAAqB,UAArB,EACCC,IADD,CACM,UAACZ,MAAD,EAAY;AAChB,UAAGA,MAAM,KAAKa,SAAd,EAAyB;AACzB,YAAMC,UAAU,GAAGd,MAAM,CAACS,IAAP,CAAYhB,WAAZ,CAAwBsB,KAA3C;AACAnB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,UAAZ;AACAR,QAAAA,cAAc,oBAAKQ,UAAL,EAAd;AACC,OAJD,MAIO,IAAId,MAAM,KAAKa,SAAf,EAA0B;AAC/BjB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAEN;AAEG,KAXD;AAWK,GAfE,EAeA,EAfA,CAAT;AAiBA,SAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEmB,MAAM,CAACC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJ,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACO,oBAAC,QAAD;AACG,IAAA,IAAI,EAAEb,WADT;AAEG,IAAA,YAAY,EAAE,sBAACc,MAAD;AAAA,aAAYA,MAAM,CAACR,EAAP,CAAUS,QAAV,EAAZ;AAAA,KAFjB;AAGG,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,UAAD;AACE,QAAA,MAAM,EAAEA,IAAI,CAACC,IADf;AAGE,QAAA,KAAK,EAAED,IAAI,CAACE,MAAL,CAAY,CAAZ,CAHT;AAIE,QAAA,OAAO,EAAE;AAAA,iBAAMC,UAAU,CAACC,QAAX,CAAoBC,MAAM,CAACC,eAA3B,EAA4CN,IAA5C,CAAN;AAAA,SAJX;AAKE,QAAA,YAAY,EAAEA,IAAI,CAACE,MAAL,CAAY,CAAZ,CALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU;AAAA,KAHf;AAYG,IAAA,UAAU,EAAEhB,UAZf;AAaG,IAAA,SAAS,EAAE,qBAAM;AACfb,MAAAA,iBAAiB,CAACS,IAAI,CAACR,GAAN,CAAjB,CACCiB,IADD,CACM,UAACZ,MAAD,EAAY;AAChB,YAAMc,UAAU,GAAGd,MAAM,CAACS,IAAP,CAAYhB,WAAZ,CAAwBsB,KAA3C;AACAT,QAAAA,cAAc,oBAAKQ,UAAL,EAAd;AACD,OAJD;AAKD,KAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADP,CAFI,CAFF;AA6BD;;AAED,IAAME,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADyB;AAI/Bb,EAAAA,SAAS,EAAE;AACTc,IAAAA,MAAM,EAAE;AADC,GAJoB;AAO/Bf,EAAAA,MAAM,EAAE;AACNgB,IAAAA,OAAO,EAAE;AADH;AAPuB,CAAlB,CAAf;AAYA,eAAehC,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { View, StyleSheet, FlatList, Text} from 'react-native';\nimport RecipeCard from '../Components/AppRecipes/RecipeCard'\nimport Screen from '../Screens/Screen'\nimport useAuth from \"../Auth/useAuth\";\n\nimport Amplify, {API,  graphqlOperation } from '@aws-amplify/api';\nimport config from '../../src/aws-exports'\nAmplify.configure(config)\n\nimport { listRecipes } from '../../src/graphql/queries'\n// import { FlatList } from 'react-native-gesture-handler';\n\nasync function grabRecipesByUser (sub) {\n  console.log(sub, \"grabRecipes\")\n  const result = await API.graphql(graphqlOperation(listRecipes, {authorRecipe: sub}))\n  return result\n}\n\nfunction Feed(props) {\n  const { user, logOut } = useAuth();\n  const [userRecipes, setUserRecipes ] = useState([]);\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    const user = user.data.getUser()\n    console.log(user)\n    grabRecipesByUser(user.id)\n    console.log(user.id, 'user.sub')\n    .then((result) => {\n      if(result !== undefined) {\n      const allRecipes = result.data.listRecipes.items\n      console.log(allRecipes)\n      setUserRecipes([...allRecipes])\n      } else if (result === undefined) {\n        console.log(\"no recipes :(\")\n        \n }\n   \n    })  }, []);\n\n  return (\n\n    <Screen style={styles.screen}>\n\n<View style={styles.container}>\n       <FlatList\n          data={userRecipes}\n          keyExtractor={(recipe) => recipe.id.toString()}\n          renderItem={({ item }) => (\n            <RecipeCard\n              header={item.name}\n              // subTitle={\"$\" + item.ingredients}\n              image={item.images[0]}\n              onPress={() => navigation.navigate(routes.LISTING_DETAILS, item)}\n              thumbnailUrl={item.images[0]}\n            />\n          )}\n          refreshing={refreshing}\n          onRefresh={() => {\n            grabRecipesByUser(user.sub)\n            .then((result) => {\n              const allRecipes = result.data.listRecipes.items\n              setUserRecipes([...allRecipes])\n            }) \n          }}\n        />\n    </View> \n</Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flexWrap: \"wrap\"\n  },\n  container: {\n    margin: 20\n  },\n  screen: {\n    padding: 20,\n  },\n});\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}