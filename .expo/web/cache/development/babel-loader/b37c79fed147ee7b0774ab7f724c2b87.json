{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/katvengo/prep-cado/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { NavigationContainer, StackActions } from '@react-navigation/native';\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider, Layout, Text } from '@ui-kitten/components';\nimport Amplify, { Storage } from 'aws-amplify';\nimport config from \"./aws-exports\";\nAmplify.configure(config);\nimport AWSAppSyncClient from \"aws-appsync\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport navigationTheme from \"./App/Navigation/navigationTheme\";\nimport AppNavigationTab from \"./App/Navigation/AppNavigationTab\";\nimport AuthNavigator from \"./App/Navigation/AuthNavigator\";\nimport AuthContext from \"./App/Auth/context\";\nimport authStorage from \"./App/Auth/storage\";\nimport { navigationRef } from \"./App/Navigation/rootNavigation\";\nvar client = new AWSAppSyncClient({\n  url: config.aws_appsync_graphqlEndpoint,\n  region: config.aws_appsync_region,\n  auth: {\n    type: config.aws_appsync_authenticationType,\n    jwtToken: function jwtToken() {\n      return _regeneratorRuntime.async(function jwtToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", token);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }\n});\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      client = _useState4[0],\n      setClient = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isReady = _useState6[0],\n      setIsReady = _useState6[1];\n\n  var restoreUser = function restoreUser() {\n    var user;\n    return _regeneratorRuntime.async(function restoreUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(authStorage.getUser());\n\n          case 2:\n            user = _context2.sent;\n            if (user) setUser(user);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(ApplicationProvider, _extends({}, eva, {\n    theme: eva.light,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), React.createElement(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    ref: navigationRef,\n    theme: navigationTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, user ? React.createElement(AppNavigationTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 14\n    }\n  }) : React.createElement(AuthNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 37\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  nav: {\n    backgroundColor: '#000'\n  }\n});","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App.js"],"names":["React","useState","NavigationContainer","StackActions","eva","ApplicationProvider","Layout","Text","Amplify","Storage","config","configure","AWSAppSyncClient","navigationTheme","AppNavigationTab","AuthNavigator","AuthContext","authStorage","navigationRef","client","url","aws_appsync_graphqlEndpoint","region","aws_appsync_region","auth","type","aws_appsync_authenticationType","jwtToken","token","App","user","setUser","setClient","isReady","setIsReady","restoreUser","getUser","light","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","nav"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,0BAAlD;AAEA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;AACA,SAASC,mBAAT,EAA8BC,MAA9B,EAAsCC,IAAtC,QAAkD,uBAAlD;AAEA,OAAOC,OAAP,IAAkBC,OAAlB,QAAiC,aAAjC;AACA,OAAOC,MAAP;AACAF,OAAO,CAACG,SAAR,CAAkBD,MAAlB;AAEA,OAAOE,gBAAP,MAA6B,aAA7B;;AAIA,OAAOC,eAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,WAAP;AACA,SAASC,aAAT;AAEA,IAAMC,MAAM,GAAG,IAAIP,gBAAJ,CAAqB;AAClCQ,EAAAA,GAAG,EAAEV,MAAM,CAACW,2BADsB;AAElCC,EAAAA,MAAM,EAAEZ,MAAM,CAACa,kBAFmB;AAGlCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEf,MAAM,CAACgB,8BADT;AAEJC,IAAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAYC,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFN;AAH4B,CAArB,CAAf;AASA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAwB5B,QAAQ,EAAhC;AAAA;AAAA,MAAO6B,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA4B9B,QAAQ,EAApC;AAAA;AAAA,MAAOkB,MAAP;AAAA,MAAea,SAAf;;AACA,mBAA8B/B,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOgC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACClB,WAAW,CAACmB,OAAZ,EADD;;AAAA;AACZN,YAAAA,IADY;AAGlB,gBAAIA,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAaA,SACE,oBAAC,mBAAD,eAAyB1B,GAAzB;AAA8B,IAAA,KAAK,EAAEA,GAAG,CAACiC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACA,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACP,MAAAA,IAAI,EAAJA,IAAD;AAAOC,MAAAA,OAAO,EAAPA;AAAP,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,mBAAD;AAAqB,IAAA,GAAG,EAAEb,aAA1B;AAAyC,IAAA,KAAK,EAAEL,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEiB,IAAI,GAAG,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA0B,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhC,CADA,CADA,CADF;AAWD;AAED,IAAMQ,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,GAAG,EAAE;AACHH,IAAAA,eAAe,EAAE;AADd;AAP0B,CAAlB,CAAf","sourcesContent":["import React, {useState} from 'react';\nimport { NavigationContainer, StackActions } from '@react-navigation/native';\n//import { AppLoading } from 'expo-app-loading'\nimport * as eva from '@eva-design/eva';\nimport { ApplicationProvider, Layout, Text } from '@ui-kitten/components';\n\nimport Amplify, { Storage } from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n// import { Auth } from 'aws-amplify';\nimport AWSAppSyncClient from \"aws-appsync\";\n\nimport { StyleSheet} from 'react-native';\n\nimport navigationTheme from './App/Navigation/navigationTheme'\nimport AppNavigationTab from './App/Navigation/AppNavigationTab'\nimport AuthNavigator from './App/Navigation/AuthNavigator'\nimport AuthContext from './App/Auth/context'\nimport authStorage from './App/Auth/storage'\nimport { navigationRef } from './App/Navigation/rootNavigation'\n\nconst client = new AWSAppSyncClient({\n  url: config.aws_appsync_graphqlEndpoint,\n  region: config.aws_appsync_region,\n  auth: {\n    type: config.aws_appsync_authenticationType,\n    jwtToken: async () => token, \n  }\n});\n\nexport default function App() {\n  const [user, setUser] = useState()\n  const [client, setClient] = useState()\n  const [isReady, setIsReady] = useState(false);\n  \n  const restoreUser = async () => {\n    const user = await authStorage.getUser();\n    // console.log(user, \"user\");\n    if (user) setUser(user);\n    // if (!isReady)\n  //   return (\n  };\n\n  // if (!isReady)\n  //   return (\n  //     // <AppLoading startAsync={restoreUser} onFinish={() => setIsReady(true)} />\n  //   );\n\n  return (\n    <ApplicationProvider {...eva} theme={eva.light}>\n    <AuthContext.Provider value={{user, setUser}}>\n    <NavigationContainer ref={navigationRef} theme={navigationTheme}>\n    { user ? <AppNavigationTab /> : <AuthNavigator /> \n    }\n    </NavigationContainer>  \n    </AuthContext.Provider>\n    </ApplicationProvider>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  nav: {\n    backgroundColor: '#000'\n  }\n});"]},"metadata":{},"sourceType":"module"}