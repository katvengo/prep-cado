{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/katvengo/prep-cado/App/Screens/LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Yup from 'yup';\nimport { Auth } from 'aws-amplify';\nimport jwtDecode from 'jwt-decode';\nimport Screen from \"./Screen\";\nimport { AppForm, AppFormField, SubmitButton, ErrorMessage } from \"../Components/forms\";\nimport AuthContext from \"../Auth/context\";\nimport useAuth from \"../Auth/useAuth\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\")\n});\n\nfunction LoginScreen(props) {\n  var auth = useAuth();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var username, password, result, access, token;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = _ref.username, password = _ref.password;\n            console.log(username, password);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Auth.signIn(username, password));\n\n          case 4:\n            result = _context.sent;\n            access = result.signInUserSession;\n            token = access.accessToken.jwtToken;\n            console.log(access, \"access\");\n\n            if (access) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 10:\n            setLoginFailed(false);\n            auth.logIn(access);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/avocado.jpg\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), React.createElement(AppForm, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 1\n    }\n  }, React.createElement(ErrorMessage, {\n    error: \"Invalid email and/or password.\",\n    visible: loginFailed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"email\",\n    placeholder: \"Email\",\n    keyboardType: \"email-address\",\n    name: \"email\",\n    textContentType: \"emailAddress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 1\n    }\n  }), React.createElement(AppFormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"lock\",\n    name: \"password\",\n    placeholder: \"Password\",\n    textContentType: \"password\",\n    secureTextEntry: true,\n    textContentType: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 1\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 1\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  logo: {\n    width: 80,\n    height: 80,\n    alignSelf: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  },\n  container: {\n    padding: 10\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/katvengo/prep-cado/App/Screens/LoginScreen.js"],"names":["React","useContext","useState","Yup","Auth","jwtDecode","Screen","AppForm","AppFormField","SubmitButton","ErrorMessage","AuthContext","useAuth","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","props","auth","loginFailed","setLoginFailed","handleSubmit","username","console","log","signIn","result","access","signInUserSession","token","accessToken","jwtToken","logIn","styles","container","logo","require","StyleSheet","create","width","height","alignSelf","marginTop","marginBottom","padding"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {StyleSheet, Image} from 'react-native'\nimport * as Yup from 'yup'\n\nimport { Auth } from 'aws-amplify';\nimport jwtDecode from 'jwt-decode'\n\nimport Screen from './Screen'\nimport { \nAppForm, AppFormField, SubmitButton, ErrorMessage,\n} from '../Components/forms'\nimport AuthContext from '../Auth/context';\nimport useAuth from \"../Auth/useAuth\";\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().required().email().label(\"Email\"),\n    password: Yup.string().required().min(4).label(\"Password\")\n})\n\n\n\nfunction LoginScreen (props) { \n    const auth = useAuth();\n    \n    const [loginFailed, setLoginFailed] = useState(false);\n\n    const handleSubmit = async({username, password}) => {\n        console.log(username, password)\n          const result = await Auth.signIn(username, password);\n          /* Once the user successfully signs in, update the form state to show the signed in state */\n          const access = result.signInUserSession\n          const token = access.accessToken.jwtToken\n          console.log(access, \"access\")\n        if (!access) return setLoginFailed(true);\n          setLoginFailed(false);\n          auth.logIn(access);\n          \n        } \nreturn ( \n<Screen style={styles.container}>\n    <Image style={styles.logo}\n    source={require('../assets/avocado.jpg')} />\n<AppForm\ninitialValues={{email: '', password: ''}}\nonSubmit={handleSubmit}\nvalidationSchema={validationSchema}\n>\n<ErrorMessage\n          error=\"Invalid email and/or password.\"\n          visible={loginFailed}\n        />\n<AppFormField\nautoCapitalize=\"none\"\nautoCorrect={false}\nicon=\"email\"\nplaceholder=\"Email\"\nkeyboardType=\"email-address\"\nname=\"email\"\ntextContentType=\"emailAddress\"\n/>\n\n<AppFormField\nautoCapitalize=\"none\"\nautoCorrect={false}\nicon=\"lock\"\nname=\"password\"\nplaceholder=\"Password\"\ntextContentType=\"password\"\nsecureTextEntry\ntextContentType=\"password\"\n\n/>\n\n<SubmitButton title=\"Login\"/>\n</AppForm>\n\n</Screen>\n);\n}\n\nconst styles = StyleSheet.create({\n    logo: {\n        width: 80,\n        height: 80,\n        alignSelf: 'center',\n        marginTop: 50,\n        marginBottom: 50,\n    },\n    container: {\n        padding: 10,\n    }, \n   \n})\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}